"Figure 8. When do transactions occur?",
fontface = 'bold',
x = 0,
hjust = 0
) +
theme(
plot.margin = margin(0, 0, 0, 7))
plot_grid(title_8,
plot_fig_8,
ncol = 1,
# rel_heights values control vertical title margins
rel_heights = c(0.1, 1))
# Code Block 21: What time do transactions occur
fig_8a <- ggplot(fraud, aes(hour)) +
geom_boxplot(color = "darkred") +
#ggtitle("What hour do transactions occur") +
ylab("Count") +
xlab("Hour")
fig_8b <- ggplot(fraud, aes(hour)) +
geom_bar(fill = "darkred") +
#ggtitle("What hour do transactions occur") +
ylab("Count") +
xlab("Hour")
plot_fig_8 <- plot_grid(fig_8a, fig_8b, labels = c('A', 'B'))
title_8 <- ggdraw() +
draw_label(
"Figure 8. When do transactions occur?",
fontface = 'bold',
x = 0,
hjust = 0
) +
theme(
plot.margin = margin(0, 0, 0, 7))
plot_grid(title_8,
plot_fig_8,
ncol = 1,
# rel_heights values control vertical title margins
rel_heights = c(0.1, 1))
# Code Block 24:
fig_9a <- ggplot(fraud, aes(amt)) +
geom_histogram(color = "darkred", fill = "darkred", bins = 50) +
#ggtitle("Amount of Transaction") +
ylab("Count") +
xlab("purchase amount ($)")
fig_9b <- ggplot(fraud, aes(log(amt))) +
geom_histogram(color = "darkred", fill = "darkred", bins = 50) +
#ggtitle("log(Amount) of Transaction") +
ylab("Count") +
xlab("log(purchase amount) ($)")
plot_fig_9 <-
plot_grid(fig_9a, fig_9b, labels = c('A', 'B'), label_size = 12)
title_9 <- ggdraw() +
draw_label(
"Figure 9. Distribution of amount and log(amount)",
fontface = 'bold',
x = 0,
hjust = 0
) +
theme(
plot.margin = margin(0, 0, 0, 7))
plot_grid(title_9,
plot_fig_9,
ncol = 1,
rel_heights = c(0.1, 1))
# Train/Test Splits & CV Folds
# Split the data into a test and training set
set.seed(111)
data_split <-
initial_split(fp, prop = 0.80, strata = is_fraud)
# Create data frames for the two sets:
train_data <- training(data_split)
test_data  <- testing(data_split)
start_time <- Sys.time()
set.seed(222)
fraud_folds <- vfold_cv(train_data, v = 3, strata = is_fraud)
# Train/Test Splits & CV Folds
# Split the data into a test and training set
set.seed(111)
data_split <-
initial_split(fp, prop = 0.80, strata = is_fraud)
# Create data frames for the two sets:
train_data <- training(data_split)
test_data  <- testing(data_split)
start_time <- Sys.time()
set.seed(222)
fraud_folds <- vfold_cv(train_data, v = 3, strata = is_fraud)
# Train/Test Splits & CV Folds
# Split the data into a test and training set
set.seed(111)
data_split <-
initial_split(fp, prop = 0.80, strata = is_fraud)
# Create data frames for the two sets:
train_data <- training(data_split)
test_data  <- testing(data_split)
start_time <- Sys.time()
set.seed(222)
fraud_folds <- vfold_cv(train_data, v = 3, strata = is_fraud)
# creating recipes
recipe_plain <-
recipe(is_fraud ~ ., data = train_data) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_numeric_predictors()) %>%
step_zv(all_predictors())
recipe_rose <-
recipe_plain %>%
step_rose(is_fraud)
recipe_smote <-
recipe_plain %>%
step_smote(is_fraud)
recipe_down <-
recipe_plain %>%
step_downsample(is_fraud)
#Setting engines
#this is the standard logistic regression
logreg_spec <-
logistic_reg() %>%
set_engine("glm")
#elastic net regularization of logistic regression
#this has 2 hyperparameters that we will tune
glmnet_spec <-
logistic_reg(penalty = tune(),
mixture = tune()) %>%
set_engine("glmnet")
#random forest also has tunable hyperparameters, but we won't
rf_spec <-
rand_forest(trees = 100) %>%
set_engine("ranger") %>%
set_mode("classification")
#This is a boosted gradient method with 6 tuning parameters
lightgbm_spec <-
boost_tree(
mtry = tune(),
trees = tune(),
tree_depth = tune(),
learn_rate = tune(),
min_n = tune(),
loss_reduction = tune()
) %>%
set_engine(engine = "lightgbm") %>%
set_mode(mode = "classification")
#Setting Metrics
fraud_metrics <-
metric_set(roc_auc, accuracy, sensitivity, specificity, j_index)
# Code block 34:
wf_set_tune <-
workflow_set(
list(plain = recipe_plain,
rose = recipe_rose,
smote = recipe_smote,
down = recipe_down),
list(glmnet = glmnet_spec,
lightgmb = lightgbm_spec,
rf = rf_spec,
logreg = logreg_spec
)
)
# Fitting models
set.seed(345)
tune_results <-
workflow_map(
wf_set_tune,
"tune_grid",
resamples = fraud_folds,
grid = 6,
metrics = fraud_metrics,
verbose = TRUE
)
save.image("D:/D/Credit Card Fraud Detection/Workspace for credit card fraud project.RData")
rank_results(tune_results, rank_metric = "j_index")
#
autoplot(tune_results, rank_metric = "j_index", select_best = TRUE) +
ggtitle("Figure 11: Performance of various models")
results_down_gmb <- tune_results %>%
extract_workflow_set_result("down_lightgmb")
autoplot(results_down_gmb) +
theme_pander(8) +
ggtitle("Figure 12: Perfomance of different hyperparameters")
library(plotly)
results_down_gmb <- tune_results %>%
extract_workflow_set_result("down_lightgmb")
p <- autoplot(results_down_gmb) +
theme_pander(8) +
ggtitle("Figure 12: Perfomance of different hyperparameters")
# Convert to Plotly
fig <- ggplotly(p)
# Print the interactive Plotly graph
fig
results_down_gmb <- tune_results %>%
extract_workflow_set_result("down_lightgmb")
p <- autoplot(results_down_gmb) +
theme_pander(8) +
ggtitle("Figure 12: Perfomance of different hyperparameters")
# Convert to Plotly
fig <- ggplotly(p)
# Print the interactive Plotly graph
fig
#
best_hyperparameters <- tune_results %>%
extract_workflow_set_result("down_lightgmb") %>%
select_best(metric = "j_index")
#
best_hyperparameters <- tune_results %>%
extract_workflow_set_result("down_lightgmb") %>%
select_best(metric = "j_index")
print(best_hyperparameters)
# Validating the model with the test data
validation_results <- tune_results %>%
extract_workflow("down_lightgmb") %>%
finalize_workflow(best_hyperparameters) %>%
last_fit(split =  data_split, metrics = fraud_metrics)
#Looking at the validation metrics from the test data.
collect_metrics(validation_results)
validation_results %>%
collect_predictions() %>%
roc_curve(is_fraud, .pred_1) %>%
autoplot() +
ggtitle("Figure 13: ROC Curve")
validation_results <- validation_results %>%
collect_predictions() %>%
roc_curve(is_fraud, .pred_1)
p <- autoplot(validation_results) +
ggtitle("Figure 13: ROC Curve")
# Convert to Plotly
fig <- ggplotly(p)
# Print the interactive Plotly graph
fig
#code block 42: Calculating how much fraud cost the company
val <- validation_results[[5]][[1]]
num_of_columns <- ncol(validation_results)
print(paste("The data frame has", num_of_columns, "columns."))
num_of_columns <- ncol(validation_results)
print(paste("The data frame has", num_of_columns, "columns."))
column_names <- colnames(validation_results)
print(column_names)
# Validating the model with the test data
validation_results <- tune_results %>%
extract_workflow("down_lightgmb") %>%
finalize_workflow(best_hyperparameters) %>%
last_fit(split =  data_split, metrics = fraud_metrics)
View(validation_results)
validation_results
# Validating the model with the test data
validation_results <- tune_results %>%
extract_workflow("down_lightgmb") %>%
finalize_workflow(best_hyperparameters) %>%
last_fit(split =  data_split, metrics = fraud_metrics)
View(validation_results)
View(validation_results)
View(validation_results)
#code block 42: Calculating how much fraud cost the company
val <- validation_results[[5]][[1]]
val %>% conf_mat(truth = is_fraud, estimate = .pred_class)
validation_results <- validation_results %>%
collect_predictions() %>%
roc_curve(is_fraud, .pred_1)
p <- autoplot(validation_results) +
ggtitle("Figure 13: ROC Curve")
# Convert to Plotly
fig <- ggplotly(p)
save.image("D:/D/Credit Card Fraud Detection/Workspace for credit card fraud project.RData")
# Print the interactive Plotly graph
fig
# Code Block 8: Exploring the Category factor
ggplot(fraud, aes(fct_infreq(category))) +
geom_bar(color = "darkred", fill = "darkred") +
ggtitle("Figure 2: Types of Transactions") +
coord_flip() +
ylab("Count") +
xlab("Merchant Type")
# Code Block 17: Looking at dob
fraud <- home_coords
#summary(fraud$dob) #if you wanted a printed summary stats
fig_6a <- ggplot(fraud, aes(dob)) +
geom_histogram(color = "darkred",
fill = "darkred" ,
bins = 10) +
#ggtitle("How old are card Holders?") +
ylab("Count") +
xlab("Date of Birth")
fraud <- fraud %>%
#mutate (age = trunc((dob %--% today()) / years(1))) #if you wanted to calculate age relative to today
mutate(age = trunc((
dob %--% min(fraud$trans_date_trans_time)
) / years(1)))
#summary(fraud$age) #if you wanted a printed summary stats
fig_6b <- ggplot(fraud, aes(age)) +
geom_histogram(color = "darkred",
fill = "darkred",
bins = 10) +
#ggtitle("How old are card holders?") +
ylab("Count") +
xlab("Age")
plot_fig_6 <- plot_grid(fig_6a, fig_6b, labels = c('A', 'B'))
title_6 <- ggdraw() +
draw_label(
"Figure 6. How old are the card holders?",
fontface = 'bold',
x = 0,
hjust = 0
) +
theme(# add margin on the left of the drawing canvas,
# so title is aligned with left edge of first plot
plot.margin = margin(0, 0, 0, 7))
plot_grid(title_6,
plot_fig_6,
ncol = 1,
# rel_heights values control vertical title margins
rel_heights = c(0.1, 1))
# Looking at Transaction Date/ Times
ggplot(fraud, aes(trans_date_trans_time)) +
geom_histogram(color = "darkred",
fill = "darkred",
bins = 24) + #24 months in dataset
ggtitle("Figure 7: When do Transactions occur") +
ylab("Count") +
xlab("Date/ Time")
# Code Block 20:
fraud <- fraud %>%
mutate(
date_only = date(trans_date_trans_time),
hour = hour(trans_date_trans_time),
weekday = wday(trans_date_trans_time)
)
ggplot(fraud, aes(weekday)) +
geom_histogram(
color = "darkgray",
fill = "darkred",
binwidth = 1,
center = 0.5
) +
ggtitle("Figure 7: On what days do transactions occur?") +
ylab("Count") +
xlab("Weekday")
# Code Block 20:
fraud <- fraud %>%
mutate(
date_only = date(trans_date_trans_time),
hour = hour(trans_date_trans_time),
weekday = wday(trans_date_trans_time)
)
ggplot(fraud, aes(weekday)) +
geom_histogram(
color = "darkred",
fill = "darkred",
binwidth = 1,
center = 0.5
) +
ggtitle("Figure 7: On what days do transactions occur?") +
ylab("Count") +
xlab("Weekday")
# Validating the model with the test data
validation_results <- tune_results %>%
extract_workflow("down_lightgmb") %>%
finalize_workflow(best_hyperparameters) %>%
last_fit(split =  data_split, metrics = fraud_metrics)
#Looking at the validation metrics from the test data.
collect_metrics(validation_results)
validation_results <- validation_results %>%
collect_predictions() %>%
roc_curve(is_fraud, .pred_1)
p <- autoplot(validation_results) +
ggtitle("Figure 13: ROC Curve")
# Convert to Plotly
fig <- ggplotly(p)
# Print the interactive Plotly graph
fig
#code block 42: Calculating how much fraud cost the company
val <- validation_results[[5]][[1]]
num_of_columns <- ncol(validation_results)
print(paste("The data frame has", num_of_columns, "columns."))
column_names <- colnames(validation_results)
print(column_names)
#code block 42: Calculating how much fraud cost the company
str(validation_results)
#code block 42: Calculating how much fraud cost the company
str(validation_results)
val <- validation_results[[3]][[1]]
val %>% conf_mat(truth = is_fraud, estimate = .pred_class)
#code block 42: Calculating how much fraud cost the company
str(validation_results)
val %>% conf_mat(truth = is_fraud, estimate = .pred_class)
View(validation_results)
#Looking at the validation metrics from the test data.
collect_metrics(validation_results)
# Validating the model with the test data
validation_results <- tune_results %>%
extract_workflow("down_lightgmb") %>%
finalize_workflow(best_hyperparameters) %>%
last_fit(split =  data_split, metrics = fraud_metrics)
#Looking at the validation metrics from the test data.
collect_metrics(validation_results)
#Looking at the validation metrics from the test data.
collect_metrics(validation_results)
validation_results <- validation_results %>%
collect_predictions() %>%
roc_curve(is_fraud, .pred_1)
p <- autoplot(validation_results) +
ggtitle("Figure 13: ROC Curve")
# Convert to Plotly
fig <- ggplotly(p)
# Print the interactive Plotly graph
fig
View(validation_results)
# Validating the model with the test data
validation_results1 <- tune_results %>%
extract_workflow("down_lightgmb") %>%
finalize_workflow(best_hyperparameters) %>%
last_fit(split =  data_split, metrics = fraud_metrics)
#Looking at the validation metrics from the test data.
collect_metrics(validation_results1)
#code block 42: Calculating how much fraud cost the company
val <- validation_results$.predictions
conf_mat(val, truth = is_fraud, estimate = .pred_class)
View(validation_results1)
validation_results %>%
collect_predictions() %>%
roc_curve(is_fraud, .pred_1) %>%
autoplot() +
ggtitle("Figure 13: ROC Curve")
# Validating the model with the test data
validation_results <- tune_results %>%
extract_workflow("down_lightgmb") %>%
finalize_workflow(best_hyperparameters) %>%
last_fit(split =  data_split, metrics = fraud_metrics)
#Looking at the validation metrics from the test data.
collect_metrics(validation_results)
validation_results %>%
collect_predictions() %>%
roc_curve(is_fraud, .pred_1) %>%
autoplot() +
ggtitle("Figure 13: ROC Curve")
#code block 42: Calculating how much fraud cost the company
val <- validation_results[[5]][[1]]
val %>% conf_mat(truth = is_fraud, estimate = .pred_class)
val <-
#I'm going to bind this to the test data and I want unique names
val %>% rename(is_fraud2  = is_fraud)
cost <- test_data %>%
cbind(val)
cost <- cost %>%
select(is_fraud, amt_log, pred = .pred_class, is_fraud2)
cost <- cost %>%
#cost for missing fraud in prediction
mutate(cost_act = ifelse((is_fraud == 1 &
pred == 0), amt_log, 0)) %>%
#cost of all fraud
mutate(cost_potential = ifelse((is_fraud == 1), amt_log, 0))
missed_fraud_cost <- round(sum(exp(cost$cost_act)), 2)
all_fraud_cost <- round(sum(exp(cost$cost_potential)), 2)
savings <- 100 * round((sum(exp(cost$cost_act)) / sum(exp(cost$cost_potential))), 2)
val <-
#I'm going to bind this to the test data and I want unique names
val %>% rename(is_fraud2  = is_fraud)
val <-
#I'm going to bind this to the test data and I want unique names
val %>% rename(is_fraud2  = is_fraud)
View(val)
cost <- test_data %>%
cbind(val)
cost <- cost %>%
select(is_fraud, amt_log, pred = .pred_class, is_fraud2)
cost <- cost %>%
#cost for missing fraud in prediction
mutate(cost_act = ifelse((is_fraud == 1 &
pred == 0), amt_log, 0)) %>%
#cost of all fraud
mutate(cost_potential = ifelse((is_fraud == 1), amt_log, 0))
missed_fraud_cost <- round(sum(exp(cost$cost_act)), 2)
all_fraud_cost <- round(sum(exp(cost$cost_potential)), 2)
savings <- 100 * round((sum(exp(cost$cost_act)) / sum(exp(cost$cost_potential))), 2)
cost <- test_data %>%
cbind(val)
cost <- cost %>%
select(is_fraud, amt_log, pred = .pred_class, is_fraud2)
cost <- cost %>%
#cost for missing fraud in prediction
mutate(cost_act = ifelse((is_fraud == 1 &
pred == 0), amt_log, 0)) %>%
#cost of all fraud
mutate(cost_potential = ifelse((is_fraud == 1), amt_log, 0))
missed_fraud_cost <- round(sum(exp(cost$cost_act)), 2)
all_fraud_cost <- round(sum(exp(cost$cost_potential)), 2)
savings <- 100 * round((sum(exp(cost$cost_act)) / sum(exp(cost$cost_potential))), 2)
savings
#Distance from Home and Fraud
ggplot(fp, aes(distance_miles, is_fraud , fill = factor(is_fraud))) +
geom_point(
alpha = 1,
shape = 21,
colour = "black",
size = 5,
position = "jitter"
) +
scale_fill_viridis(
discrete = TRUE,
labels = c('Not Fraud', 'Fraud'),
name = ""
) +
ggtitle("Figure 5: How far from home does fraud occur?") +
xlab("Distance from Home (miles)") +
ylab("Is Fraud?")
View(fraud)
View(home_coords)
View(fraud)
View(fraud)
View(fraud)
gc()
gc()
View(fraud)
View(fraud)
View(fraud)
View(fp)
